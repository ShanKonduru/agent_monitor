version: '3.8'

# Agent Monitor - Binary Deployment Production Configuration
# Optimized for deployment without source code access

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    container_name: agent_monitor_db
    environment:
      - POSTGRES_DB=agent_monitor
      - POSTGRES_USER=agent_monitor
      - POSTGRES_PASSWORD=${DB_PASSWORD:-agent_monitor_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_monitor -d agent_monitor"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  monitor-dashboard:
    image: agent_monitor-monitor:latest
    container_name: agent_monitor_dashboard
    command: python main_production_server.py
    restart: unless-stopped
    ports:
      - "${MONITOR_PORT:-8000}:8000"
    environment:
      - PYTHONPATH=/app
      - MONITOR_URL=http://${HOST_IP:-localhost}:${MONITOR_PORT:-8000}
      - DATABASE_URL=postgresql+asyncpg://agent_monitor:${DB_PASSWORD:-agent_monitor_password}@postgres:5432/agent_monitor
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - agent_data:/app/data
      - ./web:/app/web:ro
      - ./logs:/app/logs
    networks:
      - agent-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Scalable agent containers
  container-agent:
    image: agent_monitor-test-agent:latest
    command: python agent_production_deployment.py
    restart: unless-stopped
    environment:
      - AGENT_NAME=${AGENT_NAME:-üê≥ Container Agent}
      - AGENT_TYPE=${AGENT_TYPE:-LLM_AGENT}
      - WORKLOAD_TYPE=${WORKLOAD_TYPE:-llm}
      - AGENT_ENVIRONMENT=DOCKER
      - MONITOR_URL=http://monitor-dashboard:8000
      - PYTHONPATH=/app
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - agent-network
    depends_on:
      monitor-dashboard:
        condition: service_healthy
    deploy:
      replicas: ${AGENT_REPLICAS:-3}
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: agent_monitor_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: agent_monitor_proxy
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - agent-network
    depends_on:
      - monitor-dashboard
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    profiles:
      - production
      - nginx

volumes:
  postgres_data:
    driver: local
  agent_data:
    driver: local
  redis_data:
    driver: local

networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Profiles for different deployment scenarios
# Use: docker-compose --profile production up -d
# Or: docker-compose --profile minimal up -d