version: '3.8'

services:
  # PostgreSQL Database (unified storage)
  # Note: Commented out due to network connectivity issues
  # Uncomment when Docker Hub access is available
  # postgres:
  #   image: postgres:15
  #   container_name: agent_monitor_postgres
  #   environment:
  #     POSTGRES_DB: agent_monitor
  #     POSTGRES_USER: monitor_user
  #     POSTGRES_PASSWORD: secure_monitor_pass
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - agent-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U monitor_user -d agent_monitor"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

  monitor-dashboard:
    image: agent-monitor:latest
    command: python main.py
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MONITOR_URL=http://localhost:8000
      # Use persistent SQLite until PostgreSQL is available
      - DATABASE_URL=sqlite+aiosqlite:///./data/agent_monitor.db
    volumes:
      # Persistent database storage
      - agent_data:/app/data
    networks:
      - agent-network
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/agents/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  container-agent-1:
    image: agent-monitor:latest
    command: python simple_container_agent.py
    restart: unless-stopped
    environment:
      - AGENT_NAME=üê≥ Container LLM Agent 1
      - AGENT_TYPE=LLM_AGENT
      - WORKLOAD_TYPE=llm
      - AGENT_ENVIRONMENT=DOCKER
      - MONITOR_URL=http://monitor-dashboard:8000
      - PYTHONPATH=/app
    networks:
      - agent-network
    depends_on:
      monitor-dashboard:
        condition: service_healthy

  container-agent-2:
    image: agent-monitor:latest
    command: python simple_container_agent.py
    restart: unless-stopped
    environment:
      - AGENT_NAME=üê≥ Container API Agent
      - AGENT_TYPE=API_AGENT
      - WORKLOAD_TYPE=api
      - AGENT_ENVIRONMENT=DOCKER
      - MONITOR_URL=http://monitor-dashboard:8000
      - PYTHONPATH=/app
    networks:
      - agent-network
    depends_on:
      monitor-dashboard:
        condition: service_healthy

  container-agent-3:
    image: agent-monitor:latest
    command: python simple_container_agent.py
    restart: unless-stopped
    environment:
      - AGENT_NAME=üê≥ Container Data Agent
      - AGENT_TYPE=DATA_AGENT
      - WORKLOAD_TYPE=data
      - AGENT_ENVIRONMENT=DOCKER
      - MONITOR_URL=http://monitor-dashboard:8000
      - PYTHONPATH=/app
    networks:
      - agent-network
    depends_on:
      monitor-dashboard:
        condition: service_healthy

  container-agent-4:
    image: agent-monitor:latest
    command: python simple_container_agent.py
    restart: unless-stopped
    environment:
      - AGENT_NAME=üê≥ Container Monitor Agent
      - AGENT_TYPE=MONITOR_AGENT
      - WORKLOAD_TYPE=standard
      - AGENT_ENVIRONMENT=DOCKER
      - MONITOR_URL=http://monitor-dashboard:8000
      - PYTHONPATH=/app
    networks:
      - agent-network
    depends_on:
      monitor-dashboard:
        condition: service_healthy

  container-agent-5:
    image: agent-monitor:latest
    command: python simple_container_agent.py
    restart: unless-stopped
    environment:
      - AGENT_NAME=üê≥ Container ML Agent
      - AGENT_TYPE=CUSTOM
      - WORKLOAD_TYPE=ml
      - AGENT_ENVIRONMENT=DOCKER
      - MONITOR_URL=http://monitor-dashboard:8000
      - PYTHONPATH=/app
    networks:
      - agent-network
    depends_on:
      monitor-dashboard:
        condition: service_healthy

networks:
  agent-network:
    driver: bridge

volumes:
  # postgres_data:  # Uncomment when PostgreSQL is enabled
  #   driver: local
  agent_data:
    driver: local